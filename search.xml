<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[用 React 開發具有完整 CI/CD 流程的 Chrome Extension]]></title>
      <url>/blog/2017/05/21/chrome-extension-dev-with-react-and-full-ci-cd/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>身為一個前端工程師，在工作上遇到一些需要反覆操作的流程時，總會想要用一些方法來優化它。像我自己也在公司開發了一些 <a href="https://kaddopur.github.io/projects">CLI 及 Chrome Extension</a> 來加速日常的開發。然而在開發了這些工具的同時，我卻也不經意的為自己引入了新的<em>反覆操作</em>，如果可以把測試、過版、壓檔、上傳、發佈……等步驟全部自動化，我就可以更專注的在新功能上的開發上。</p>
<p>底下將以開發一個新的 Chrome Extension 為例，利用 <a href="https://travis-ci.org/" target="_blank" rel="external">Travis CI</a> 及 <a href="https://developer.chrome.com/webstore/using_webstore_api" target="_blank" rel="external">Chrome Web Store Publish API</a> 做到完整的 CI/CD 整合。</p>
<h2 id="開發環境"><a href="#開發環境" class="headerlink" title="開發環境"></a>開發環境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ node -v</div><div class="line">v6.3.1</div><div class="line">$ yarn -v</div><div class="line">yarn install v0.24.5</div></pre></td></tr></table></figure>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><blockquote>
<ol>
<li>建一個新的 React 專案</li>
<li>Chrome Extension 設定</li>
<li>基本 CI 設定</li>
<li>自動化打包及發布 CD 設定</li>
<li>發布 Chrome Extension</li>
</ol>
</blockquote>
<a id="more"></a>
<h3 id="建一個新的-React-專案"><a href="#建一個新的-React-專案" class="headerlink" title="建一個新的 React 專案"></a>建一個新的 React 專案</h3><p>這個步驟很簡單，只有一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn create react-app &lt;EXTENSION_NAME&gt;</div></pre></td></tr></table></figure></p>
<p>本篇教學所用的<code>EXTENSION_NAME</code>是<code>my-ext</code>，所以我用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn create react-app my-ext</div></pre></td></tr></table></figure></p>
<p>它會幫你開一個新的 React 專案<code>my-ext</code>。</p>
<h3 id="Chrome-Extension-設定"><a href="#Chrome-Extension-設定" class="headerlink" title="Chrome Extension 設定"></a>Chrome Extension 設定</h3><p>這個新的 React 專案現在還不是一個合法的 Chrome Extension，我們需要補上正確的設定。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// public/manifest.json</div><div class="line">&#123;</div><div class="line">  "short_name": "React App",</div><div class="line">  "name": "Create React App Sample",</div><div class="line">  "icons": [</div><div class="line">    &#123;</div><div class="line">      "src": "favicon.ico",</div><div class="line">      "sizes": "192x192",</div><div class="line">      "type": "image/png"</div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  "start_url": "./index.html",</div><div class="line">  "display": "standalone",</div><div class="line">  "theme_color": "#000000",</div><div class="line">  "background_color": "#ffffff"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>目前的<code>manifest.json</code>是 PWA 的設定，而不是我們所想要的 Chrome Extension 設定，所以將其改寫為</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// public/manifest.json</div><div class="line">&#123;</div><div class="line">  "manifest_version": 2,</div><div class="line">  "name": "my-ext",</div><div class="line">  "description": "...",</div><div class="line">  "version": "0.1.0",</div><div class="line">  "browser_action": &#123;</div><div class="line">    "default_popup": "index.html"</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再來，<code>manifest.json</code>中的 version 應該要與<code>package.json</code>中的 version 互相對應。為了不要每次過版都要手動改兩邊的版本，我用<code>version-everything</code>來幫我處理版號問題</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn add -D version-everything</div></pre></td></tr></table></figure>
<p>首先安裝它，再更改<code>package.json</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// package.json</div><div class="line">&#123;</div><div class="line">  ...</div><div class="line">  "scripts" : &#123;</div><div class="line">    ...</div><div class="line">    "version": "version-everything &amp;&amp; git add -u"</div><div class="line">  &#125;,</div><div class="line">  "version_files": [</div><div class="line">    "public/manifest.json"</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如此一來，我們在用<code>yarn version</code>的指令跳版號時，會觸發 version 這個 hook 以達到版號同步的效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn build</div></pre></td></tr></table></figure>
<p>接下來我們在 Chrome 上看看<code>my-ext</code>能不能正確地被載入。<code>yarn build</code>這個指令在打包時會把在<code>./public</code>底下的檔案也一併複製到<code>./build</code>底下，如此一來，我們即可以在 chrome 中用<a href="https://developer.chrome.com/extensions/getstarted#unpacked" target="_blank" rel="external">載入未封裝擴充功能</a>，裝載<code>./build</code></p>
<p>載入後可以看到瀏覽器右上角出現一個按鈕，按下去之後會彈現一個視窗如下圖<br><img src="http://i.imgur.com/viruNna.png" alt="http://i.imgur.com/viruNna.png"></p>
<p>恭喜，我們的 Chrome Extension 看起來設定對了。</p>
<h3 id="基本-CI-設定"><a href="#基本-CI-設定" class="headerlink" title="基本 CI 設定"></a>基本 CI 設定</h3><p>這步驟主要是設定好 <a href="https://travis-ci.org/" target="_blank" rel="external">Travis CI</a> 的串接，首先我們必須要 push 我們的專案到 <a href="https://github.com/kaddopur/my-ext" target="_blank" rel="external">github repo</a>，再來在 Travis 中打開此 repo 的開關 (在這裡是 kaddopur/my-ext)，最後設置<code>.travis.yml</code>如下<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># .travis.yml</span></div><div class="line"><span class="attr">language:</span> <span class="string">node_js</span></div><div class="line"><span class="attr">node_js:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">"6"</span></div><div class="line"><span class="attr">cache:</span> <span class="string">yarn</span></div></pre></td></tr></table></figure></p>
<p>這邊我們用的是 <code>node@6</code>，再來我們也打開了 yarn caching。將<code>.travis.yml</code> commit 之後 push 到 github，你會看到 Travis 開始跑起來了。</p>
<h3 id="自動化打包及發布-CD-設定"><a href="#自動化打包及發布-CD-設定" class="headerlink" title="自動化打包及發布 CD 設定"></a>自動化打包及發布 CD 設定</h3><p>我們將會利用 Travis 的 <code>after_success</code> hook 來自動觸發上傳及發布，但在上傳之前，我們需要準備好 Extension 的 zip 檔。在<code>yarn build</code>之後，我用<code>adm-zip</code>來幫我產生壓縮檔</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn add -D adm-zip</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// scripts/zip.js</span></div><div class="line"><span class="keyword">const</span> AdmZip = <span class="built_in">require</span>(<span class="string">'adm-zip'</span>);</div><div class="line"><span class="keyword">const</span> zip = <span class="keyword">new</span> AdmZip();</div><div class="line">zip.addLocalFolder(<span class="string">`<span class="subst">$&#123;process.cwd()&#125;</span>/build`</span>);</div><div class="line">zip.writeZip(<span class="string">`<span class="subst">$&#123;process.cwd()&#125;</span>/bundle.zip`</span>);</div></pre></td></tr></table></figure>
<p>它會把<code>/build</code>資料夾壓成<code>bundle.zip</code></p>
<p>再來我會使用<code>webstore-upload</code>來上傳壓縮檔與發布</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn add -D webstore-upload</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// scripts/upload.js</span></div><div class="line"><span class="keyword">const</span> webstore_upload = <span class="built_in">require</span>(<span class="string">'webstore-upload'</span>);</div><div class="line"><span class="keyword">const</span> uploadOptions = &#123;</div><div class="line">    <span class="attr">accounts</span>: &#123;</div><div class="line">        <span class="attr">default</span>: &#123;</div><div class="line">            <span class="attr">publish</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">client_id</span>: process.env.CLIENT_ID,</div><div class="line">            <span class="attr">client_secret</span>: process.env.CLIENT_SECRET,</div><div class="line">            <span class="attr">refresh_token</span>: process.env.REFRESH_TOKEN</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">extensions</span>: &#123;</div><div class="line">        <span class="attr">my_ext</span>: &#123;</div><div class="line">            <span class="attr">appID</span>: process.env.APP_ID,</div><div class="line">            <span class="attr">zip</span>: <span class="string">`<span class="subst">$&#123;process.cwd()&#125;</span>/bundle.zip`</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">uploadExtensions</span>: [<span class="string">'my_ext'</span>]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">webstore_upload(uploadOptions, <span class="string">'default'</span>)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(result);</div><div class="line">        <span class="comment">// do somethings nice</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'yay'</span>;</div><div class="line">    &#125;)</div><div class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.error(err);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>我們要提供<code>client_id</code>,<code>client_script</code>,<code>refresh_token</code>及 Extension 的<code>appID</code>方可使用。特別提醒一下，我把這些值設為 Travis 的環境變數並在執行時取得，而非 commit 在程式碼中。</p>
<p>這些值怎麼取得的</p>
<ul>
<li>前三項怎麼產生請看這 <a href="https://github.com/DrewML/chrome-webstore-upload/blob/master/How%20to%20generate%20Google%20API%20keys.md" target="_blank" rel="external">How to generate Google API keys</a></li>
<li><code>appID</code>請先手動上傳你的 Extension 一次後，在<a href="https://chrome.google.com/webstore/developer/dashboard?hl=zh-TW" target="_blank" rel="external">開發人員資訊主頁</a>的右邊每個 Extension 的<strong>更多資訊</strong>中，可以找到<strong>商品ID</strong>即為你的<code>appID</code>。</li>
</ul>
<p>最後，我們把<code>after_success</code> hook 設定好<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// package.json</div><div class="line">&#123;</div><div class="line">  ...</div><div class="line">  "scripts": &#123;</div><div class="line">    ...</div><div class="line">    "zip": "node scripts/zip.js",</div><div class="line">    "upload": "node scripts/upload.js"</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># .travis.yml</span></div><div class="line"><span class="attr">after_success:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">yarn</span> <span class="string">build</span></div><div class="line"><span class="bullet">  -</span> <span class="string">yarn</span> <span class="string">zip</span></div><div class="line"><span class="bullet">  -</span> <span class="string">yarn</span> <span class="string">upload</span></div></pre></td></tr></table></figure>
<p>就大功告成啦！</p>
<h3 id="發布-Chrome-Extension"><a href="#發布-Chrome-Extension" class="headerlink" title="發布 Chrome Extension"></a>發布 Chrome Extension</h3><p>只要 repo 上的 master branch 有新的 commit，Travis 都會幫我們跑 CI/CD 流程。需要特別注意的是，Chrome Web Store 無法上傳和同版本的 Extension，所以 merge 時請記得跳個版。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ yarn version</div><div class="line">yarn version v0.24.5</div><div class="line">info Current version: 0.1.0</div><div class="line">question New version: 0.1.1 // 輸入你的新版號</div><div class="line">info New version: 0.1.1</div><div class="line">$ version-everything &amp;&amp; git add -u // 更新 manifest.json 中的 version</div><div class="line">Loading package.json</div><div class="line">Current version is &quot;0.1.1&quot;</div><div class="line">Updated public/manifest.json from 0.1.0 to 0.1.1</div><div class="line">✨  Done in 5.21s.</div></pre></td></tr></table></figure>
<p>直接<code>git push</code>或是你要先發 PR 再 merge 也行。之後在你的<a href="https://chrome.google.com/webstore/developer/dashboard?hl=zh-TW" target="_blank" rel="external">開發人員資訊主頁</a>就可以看到版本更新了！</p>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>程式碼放在 <a href="https://github.com/kaddopur/my-ext" target="_blank" rel="external">https://github.com/kaddopur/my-ext</a> ，如果過程中有任何問題或討論也歡迎在底下留言。</p>
]]></content>
      
        <categories>
            
            <category> 筆記 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
            <tag> travis </tag>
            
            <tag> CI/CD </tag>
            
            <tag> Chrome Extension </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Y2017W20]]></title>
      <url>/blog/2017/05/20/Y2017W20/</url>
      <content type="html"><![CDATA[<p>本週寫了一篇教學文，感覺過程中收穫不少。也許以後可以把想要深究的主題當做是下次連載的文章內容，強迫自己<em>「教學相長」</em>wwww。</p>
<h2 id="Blog-posts"><a href="#Blog-posts" class="headerlink" title="Blog posts"></a>Blog posts</h2><ul>
<li><a href="https://kaddopur.github.io/blog/2017/05/21/chrome-extension-dev-with-react-and-full-ci-cd/">用 React 開發具有完整 CI/CD 流程的 Chrome Extension</a><br>  寫了一篇 travis &amp; web store publish api 教學，其實用了蠻多時間在實驗 auth 及驗証上傳有沒有成功。有在寫 chrome extension 的同學可以試試看。</li>
</ul>
<h2 id="Articles"><a href="#Articles" class="headerlink" title="Articles"></a>Articles</h2><ul>
<li><a href="https://developers.google.com/web/fundamentals/" target="_blank" rel="external">Web Fundamentals</a><br>  主要是有一些關於前端<em>架構</em>，<em>效能</em>及<em>設計</em>方面的文章，內容很多，可以中午配鈑吃。</li>
</ul>
<h2 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h2><ul>
<li><a href="https://www.codeschool.com/courses/try-docker" target="_blank" rel="external">Try Docker by Code School</a><br>  免費在線暢玩 docker</li>
</ul>
<a id="more"></a>
<h2 id="Languages"><a href="#Languages" class="headerlink" title="Languages"></a>Languages</h2><ul>
<li><a href="http://iknow.jp" target="_blank" rel="external">iKnow!</a></li>
<li><a href="https://lingvist.com/" target="_blank" rel="external">LINGVIST</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 週記 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[git submodule 教學]]></title>
      <url>/blog/2017/05/15/git-submodule/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Submodules (子模組) 其實是個很常見的概念，在專案中想要引入其他專案的代碼，亦或是第三方的函式庫，被引入的庫就可以被看為是一個子模組。</p>
<p>在 Node.js 的專案中，子模組是由 <a href="https://yarnpkg.com/zh-Hans/" target="_blank" rel="external">yarn</a> / <a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a> 來幫我們管理其中的依賴。其他的語言也有相對應的套件管理系統，像是 Ruby 有 <a href="https://rubygems.org/?locale=zh-TW" target="_blank" rel="external">RubyGems</a>，Elixir 有 <a href="https://hex.pm/" target="_blank" rel="external">hex</a> ……等，這些套件管理系統可以利用 <a href="http://semver.org/lang/zh-TW/" target="_blank" rel="external">semver</a> 格式的版本號來拉取想要的子模組版本。</p>
<p>但如果想引入的專案並沒有放在套件管理系統中，或是這個語言根本沒有對應的套件管理系統的時候，要想管理子模組就開始會變得有點麻煩。我們需要有一個比較好的方式來靈活管理我們的子模組。</p>
<a id="more"></a>
<p><code>git submodule</code> 指令剛好可以在這邊派上用場，它可以用來管理巢狀的 git 專案。你可以在專案中引用其他的專案，並以該專案的提交 Hash 當做所依賴的版本號 (有點像是用 git 當做你的套件管理系統XD )，但使用的步驟稍微有點複雜，下面會說明。</p>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="新增子模組"><a href="#新增子模組" class="headerlink" title="新增子模組"></a>新增子模組</h3><p>想要把一個專案當做是子模組加到你想要的路徑之下，可以用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git submodule add &lt;repository&gt; [&lt;path&gt;]</div></pre></td></tr></table></figure></p>
<p>舉個實際的例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git submodule add https://github.com/kaddopur/hexo-theme-bubuzou.git themes/bubuzou</div></pre></td></tr></table></figure></p>
<p>意思就是把 <code>hexo-theme-bubuzou</code> 這個專案加到 <code>theme/bubuzou</code> 這個路徑之下。你會發現有三個檔案被改動/新增了，其中兩個你可以看得到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># .gitmodules</div><div class="line">[submodule &quot;themes/bubuzou&quot;]</div><div class="line">    path = themes/bubuzou</div><div class="line">    url = git@github.com:kaddopur/hexo-theme-bubuzou.git</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># themes/bubuzou</div><div class="line">Subproject commit 51c576971e7f8f3693bd16ea21075e45758e7432</div></pre></td></tr></table></figure>
<p>一個是 git 幫我們產生的 <code>.gitmodules</code> 設定檔，其中包含了儲存庫與路徑的對應關係。而另一個是 <code>themes/bubuzou</code>，由外層的 git 來看，它是一個子模組當前所使用的提交 Hash。至於那個看不到的改動是在 <code>.git/config</code> 當中，當你要刪除子模組時要記得去清掉。</p>
<p>我們可以將變動存為另一個提交，如此一來即完成了子模組的新增。</p>
<h3 id="提交子模組更新"><a href="#提交子模組更新" class="headerlink" title="提交子模組更新"></a>提交子模組更新</h3><p>子模組有更動需要提交，請依照步驟如下</p>
<ol>
<li>提交子模組更動</li>
<li>上傳到子模組的遠端儲存庫 </li>
<li>提交上層專案更動</li>
<li>上傳到上層專案的遠端儲存庫 </li>
</ol>
<p>如果專案沒有放在遠端，則 2, 4 步可省略。若有的話，千萬記得一定要將子模組的提交上傳到遠端，不然就等著收共事者的信吧XD。 </p>
<h3 id="移除子模組"><a href="#移除子模組" class="headerlink" title="移除子模組"></a>移除子模組</h3><p>要移除子模組有點麻煩，一共 7 個步驟 (<a href="https://git.wiki.kernel.org/index.php/GitSubmoduleTutorial#Removal" target="_blank" rel="external">參考</a>)</p>
<ol>
<li>刪掉 <code>.git/config</code> 中相關的段落</li>
<li>刪掉 <code>.gitmodules</code> 中相關的段落</li>
<li>暫存  <code>.gitmodules</code> 的更動</li>
<li>用 <code>git rm --cached</code> 停止追蹤子模組</li>
<li>刪掉 <code>.git/modules/&lt;submodule&gt;</code></li>
<li>提交更新</li>
<li>真正把子模組刪除</li>
</ol>
<p>實際的指令如下，每步一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git submodule deinit themes/bubuzou</div><div class="line">$ vi .gitmodules</div><div class="line">$ git add .gitmodules</div><div class="line">$ git rm --cached themes/bubuzou  # 後面不帶 &apos;/&apos;</div><div class="line">$ rm -rf .git/modules/themes/bubuzou</div><div class="line">$ git commit -m &apos;remove bubuzou&apos;</div><div class="line">$ rm -rf themes/bubuzou</div></pre></td></tr></table></figure></p>
<h3 id="複製包含子模組的專案"><a href="#複製包含子模組的專案" class="headerlink" title="複製包含子模組的專案"></a>複製包含子模組的專案</h3><p>直接 <code>git clone</code> 上層專案，你會發現子模組的資料夾存在但卻是空的。此時你要先運行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git submodule init</div></pre></td></tr></table></figure></p>
<p>這個指令會將你在 <code>.gitmodules</code> 中的子模組設定寫入 <code>.git/config</code> 中，接下來再運行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git submodule update</div></pre></td></tr></table></figure>
<p>這個時候子模組才會真正被下載下來</p>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>如果你的專案常常被其他專案引用，這時就是你拆分專案成為一個子模組的好時機。但如果你是寫 Node.js 或是 Ruby，請儘量使用該語言的套件管理系統來公布你的專案以方便日後引用。真的沒有辦法了，再用 <code>git submodule</code>，因為它真的有點麻煩。</p>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>這次會寫 <code>git submodule</code> 的文章是因為這個部落格用了一個新主題 <a href="https://github.com/Bulandent/hexo-theme-bubuzou" target="_blank" rel="external">bubuzou</a>，而我想要對這個主題做一些修改並加入版本控制，所以我先 fork 這個主題後，將其以<a href="https://git-scm.com/book/zh-tw/v1/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E7%B5%84-Submodules" target="_blank" rel="external">子模組</a>的方式加入我的部落格中。而文內所提到的一些指令，主要是設定部落格主題時實際用到的，我想將之記錄下來以便日後查詢，或是有人要問的時候可以少費一些唇舌直接貼這篇。在此特別感謝強者我同事<a href="https://tom76kimo.github.io/blog/" target="_blank" rel="external">湯姆餡</a>熱心教學。</p>
]]></content>
      
        <categories>
            
            <category> 筆記 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> CLI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Y2017W19]]></title>
      <url>/blog/2017/05/13/Y2017W19/</url>
      <content type="html"><![CDATA[<h2 id="Blog-posts"><a href="#Blog-posts" class="headerlink" title="Blog posts"></a>Blog posts</h2><ul>
<li><a href="https://kaddopur.github.io/blog/2017/05/10/prettier/">使用 prettier 自動調整 JavaScript 樣式</a></li>
</ul>
<h2 id="Books"><a href="#Books" class="headerlink" title="Books"></a>Books</h2><ul>
<li><a href="http://design-patterns.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="external">图说设计模式</a><ul>
<li>看懂UML类图和时序图</li>
<li>创建型模式<ol>
<li>简单工厂模式( Simple Factory Pattern )</li>
</ol>
</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="Languages"><a href="#Languages" class="headerlink" title="Languages"></a>Languages</h2><ul>
<li><a href="http://iknow.jp" target="_blank" rel="external">iKnow!</a></li>
<li><a href="https://lingvist.com/" target="_blank" rel="external">LINGVIST</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 週記 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 prettier 自動調整 JavaScript 樣式]]></title>
      <url>/blog/2017/05/10/prettier/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>prettier</code> 是一款 JavaScript 的樣式處理工具，它類似 golang 的 <code>gofmt</code> 可以自動排版你的程式。除了 Vanilla JS 之外，尚支援了 ES6, jsx, Flow 以及正在開發中的 TypeScript。它是由 <a href="https://twitter.com/vjeux" target="_blank" rel="external">vjeux (Christopher Chedeau)</a>  開發，在 <a href="https://github.com/prettier/prettier" target="_blank" rel="external">github</a> 上面約有 10,000 個 stars。</p>
<p><code>prettier</code> 從今年一月的第一個 commit 開始到現在快半年，不過到它真正引起我的興趣，是從上週 (5/3) 釋出的 <code>v1.3.0</code> 開始。至於這個版本有什麼特別的功能嗎？非也。主要是因為這個版本有公開它在 Facebook 內部各專案使用 <code>prettier</code> 的情形。</p>
<a id="more"></a>
<blockquote>
<p>The first projects to adopt prettier were Jest, React and immutable-js. Those are small codebases in the order of hundreds of files that have their own infrastructure. There are a handful of people working on them full time.<br><br>Then, Oculus and Nuclide converted their codebase over. The scale is bigger with a few thousands of files and tens of full time contributors but looks pretty similar to the first projects. The conversions went in one big codemod and that’s it.</p>
</blockquote>
<p>可以看到 Facebook 的專案一個接一個開始用 <code>prettier</code> 來規範及管理他們的 JavaScript 樣式，而 <code>prettier</code> 和我們平常在用的 <code>eslint</code> 或是其他的 lint 工具相比之下孰優孰劣呢？</p>
<h2 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h2><ol>
<li><p><strong>一致性 Consistency</strong><br>同一種表達式對於不同的人可能會有不同的寫法，使用 <code>prettier</code> 可以輕易保持代碼中樣式的一致式，避免個人習慣樣式的不同。</p>
</li>
<li><p><strong>可教性 Teachability</strong><br>經過 <code>prettier</code> 調整格式之後，你可以知道 JavaScript 引擎是怎麼解析你所寫的代碼，進而幫助你養成良好的撰寫習慣來避免一些語意上的錯誤。例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> x = value1 &amp;&amp; value2 || value3 &amp;&amp; value4;</div></pre></td></tr></table></figure>
<p>會幫你加上括號</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> x = (value1 &amp;&amp; value2) || (value3 &amp;&amp; value4);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>自由度 Freedom</strong><br>只需要專心在寫代碼這件事就好了，不用刻意去手動調整樣式。在抽函數的時候也蠻有用的。</p>
</li>
</ol>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p><code>prettier</code> 提供了 CLI 方便你轉換檔案。你也可以將 <code>prettier</code> 設定在專案的工作流程中，在 commit 時自動排版並簽入至你的 repo。或是你也可以將 <code>prettier</code> 與你最愛的編輯器綁定，讓你在存檔時可以自動排版並看到結果。以下會分別介紹。</p>
<p>可以局部安裝到你的專案<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn add prettier --dev</div></pre></td></tr></table></figure></p>
<p>或是全局安裝<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn global add prettier</div></pre></td></tr></table></figure></p>
<h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><p>使用方式如下，可以選擇想要轉換的檔案。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ prettier [opts] [filename ...]</div></pre></td></tr></table></figure></p>
<p>實際上使用的情形可能會像這樣<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ prettier --single-quote --write &quot;&#123;app,__&#123;tests,mocks&#125;__&#125;/**/*.js&quot;</div></pre></td></tr></table></figure></p>
<p>想要知道有什麼參數可以下，可以輸入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ prettier</div><div class="line">Usage: prettier [opts] [filename ...]</div><div class="line"></div><div class="line">Available options:</div><div class="line">  --write                  Edit the file in-place. (Beware!)</div><div class="line">  --list-different or -l   Print filenames of files that are different from Prettier formatting.</div><div class="line">  --stdin                  Read input from stdin.</div><div class="line">  --print-width &lt;int&gt;      Specify the length of line th</div><div class="line">  ...</div></pre></td></tr></table></figure></p>
<p>會列出所有可以用的選項</p>
<h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>將 <code>husky</code> 和 <code>lint-staged</code> 加到專案的 devDependencies<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn add lint-staged husky --dev</div></pre></td></tr></table></figure></p>
<p>在 <code>package.json</code> 中填加以下 config<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"precommit"</span>: <span class="string">"lint-staged"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"lint-staged"</span>: &#123;</div><div class="line">    <span class="attr">"*.js"</span>: [</div><div class="line">      <span class="string">"prettier --write"</span>,</div><div class="line">      <span class="string">"git add"</span></div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>husky</code> 會讓專案在 git commit 時執行 “precommit” 這個命令。而在 <code>lint-staged</code> 中，會檢查所有被 stage 的檔案，如果有符合特定檔名，就會再運行指定的命令。</p>
<p>在上面的例子中，我們會在 git commit 之前，對所有被 stage 的 JavaScript 檔案運行 <code>prettier</code> 後，再重新 stage 更新後的檔案，以確保所有進入 repo 的代碼的樣式正確。</p>
<h3 id="Editor"><a href="#Editor" class="headerlink" title="Editor"></a>Editor</h3><p><code>prettier</code> 對大部分的編輯器都有對應的工具，這邊以我的編輯器 VS Code 為例。</p>
<p>去 MartketPlace 下載 <a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="external">Prettier - JavaScript formatter</a>。安裝完成後，可以用 <code>CMD + Shift + P</code> 來重新排版整個檔案，或是用 <code>CMD + Shift + P</code> 重排所選擇的區域。</p>
<p>想要調整 <code>prettier</code> 所使用的排版選項，可以在 <code>User Settings</code> 來全局更改所想要的 <code>prettier</code> 參數，或是也可以用 <code>Workspace Settings</code> 來按照不同專案設定不同選項。</p>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>在專案中，可以無痛導入工作流程而不用特別針對樣式錯誤去手動調整是 <code>prettier</code> 的一大優勢，可以讓 coding style 一次到位，也沒有撰寫代碼時多餘的打字或心理成本。</p>
<p>對於已經導入 <code>eslint</code> 並有團隊自訂 rule set 的專案，<code>prettier</code> 雖可以用參數調整所產出的代碼，但可以調整的地方有限，所產出的代碼也不一定會完全相符於之前的 rule set，這時必定要與團隊成員有良好溝通再行導入，畢竟<strong>“團隊的樣式就是最好的樣式”</strong>。</p>
]]></content>
      
        <categories>
            
            <category> 筆記 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> prettier </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Facebook </tag>
            
            <tag> tool </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Y2017W18]]></title>
      <url>/blog/2017/05/06/Y2017W18/</url>
      <content type="html"><![CDATA[<h2 id="Articles"><a href="#Articles" class="headerlink" title="Articles"></a>Articles</h2><ul>
<li><a href="https://blog.louie.lu/2017/04/30/%E9%96%8B%E7%99%BC%E4%BA%BA%E5%93%A1%E7%9A%84%E9%9D%A2%E8%A9%A6%E6%8C%87%E5%8D%97-a-developers-guide-to-interviewing/" target="_blank" rel="external">開發人員的面試指南 – A developer’s guide to interviewing</a><br>  面試時除了面試官問你問題，你也可以反過來詢問這間公司的工作環境、獲利手段或願景等等。文中列舉你可能會想問的問題，並依詢問對象區分為工程師、管理階層以及 CTO。很適合已有實習經驗或是想換工作的工程師閱讀。</li>
<li><a href="https://mathiasbynens.github.io/rel-noopener/" target="_blank" rel="external">About rel=noopener</a><br>  網頁中的 <code>&lt;a&gt;</code> 在連至外部網站時，需要帶上 <code>rel=&quot;noopener&quot;</code>，以避免惡意網站利用 <code>window.opener</code> 來改動原始網頁。</li>
<li><a href="https://softnshare.wordpress.com/2016/02/24/10classprogrammerbooks/" target="_blank" rel="external">每位認真的程式設計師都要讀的10本經典書</a><br>  看過其中三本<blockquote>
<ol>
<li>The Pragmatic Programmer<br> (程序員修煉之道︰從小工到專家︰評注版)</li>
<li>The Mythical Man-month: Essays on Software Engineering 👍<br> (人月神話:軟體專案管理之道)</li>
<li>Clean Code: A Handbook of Agile Software Craftsmanship<br> (無瑕的程式碼－敏捷軟體開發技巧守則)</li>
<li>The Clean Coder: A Code of Conduct for Professional Programmers<br> (無瑕的程式碼番外篇－專業程式設計師的生存之道)</li>
<li>Refactoring: Improving the Design of Existing Code<br> (重構─改善既有程式的設計)</li>
<li>Working Effectively with Legacy Code<br> (修改代碼的藝術)</li>
<li>Code Complete: A Practical Handbook of Software Construction<br> (代碼大全 2)</li>
<li>Head First Design Patterns 👍<br> (深入淺出設計模式)</li>
<li>Peopleware: Productive Projects and Teams<br> (Peopleware：腦力密集產業的人才管理之道)</li>
<li>Soft Skills: The software developer’s life manual 👍<br>(軟體技能代碼之外的生存指南)</li>
</ol>
</blockquote>
</li>
</ul>
<a id="more"></a>
<h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><ul>
<li><a href="https://developers.google.com/web/tools/lighthouse/" target="_blank" rel="external">Google Lighthouse</a><br>  這個 google extension 是用來檢測網頁在行動裝置上的優化程度，包含是不是 <code>https</code>，有沒有支援離線模式……等等。</li>
<li><a href="https://github.com/prettier/prettier" target="_blank" rel="external">Prettier - an opinionated JavaScript formatter.</a><br>  是目前 facebook 的專案採用的 js formatter，對各種編緝器的支援也很好，還有 CLI 可以用。 </li>
</ul>
<h2 id="Languages"><a href="#Languages" class="headerlink" title="Languages"></a>Languages</h2><ul>
<li><a href="http://iknow.jp" target="_blank" rel="external">iKnow!</a></li>
<li><a href="https://lingvist.com/" target="_blank" rel="external">LINGVIST</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 週記 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> prettier </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Y2017W17]]></title>
      <url>/blog/2017/04/29/Y2017W17/</url>
      <content type="html"><![CDATA[<h2 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h2><ul>
<li><a href="https://leetcode.com/problems/merge-sorted-array/#/description" target="_blank" rel="external">88. Merge Sorted Array</a></li>
<li><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/#/description" target="_blank" rel="external">26. Remove Duplicates from Sorted Array</a></li>
<li><a href="https://leetcode.com/problems/third-maximum-number/#/description" target="_blank" rel="external">414. Third Maximum Number</a></li>
<li><a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/#/description" target="_blank" rel="external">448. Find All Numbers Disappeared in an Array</a></li>
<li><a href="https://leetcode.com/problems/k-diff-pairs-in-an-array/#/description" target="_blank" rel="external">532. K-diff Pairs in an Array</a></li>
<li><a href="https://leetcode.com/problems/array-partition-i/#/description" target="_blank" rel="external">561. Array Partition I</a></li>
</ul>
<a id="more"></a>
<h2 id="Books"><a href="#Books" class="headerlink" title="Books"></a>Books</h2><ul>
<li><a href="https://www.amazon.cn/gp/product/B01J9MZPPO" target="_blank" rel="external">软技能 代码之外的生存指南</a> - <em>John Z. Sonmez, 王小刚</em><ul>
<li>Chapter 17 ~ 71</li>
</ul>
</li>
</ul>
<h2 id="Languages"><a href="#Languages" class="headerlink" title="Languages"></a>Languages</h2><ul>
<li><a href="http://iknow.jp" target="_blank" rel="external">iKnow!</a></li>
<li><a href="https://lingvist.com/" target="_blank" rel="external">LINGVIST</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 週記 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Y2017W16]]></title>
      <url>/blog/2017/04/22/Y2017W16/</url>
      <content type="html"><![CDATA[<h2 id="Books"><a href="#Books" class="headerlink" title="Books"></a>Books</h2><ul>
<li><a href="https://www.amazon.com/Programming-Phoenix-Productive-Reliable-Fast/dp/1680501453" target="_blank" rel="external">Programming Phoenix: Productive |&gt; Reliable |&gt; Fast</a> - <em>Chris McCord</em><ul>
<li>Chapter 4 - Ecto and Changesets</li>
<li>Chapter 5 - Authenticating Users</li>
</ul>
</li>
<li><a href="https://www.amazon.cn/gp/product/B01J9MZPPO" target="_blank" rel="external">软技能 代码之外的生存指南</a> - <em>John Z. Sonmez, 王小刚</em><ul>
<li>Chapter 1 ~ 16</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="Languages"><a href="#Languages" class="headerlink" title="Languages"></a>Languages</h2><ul>
<li><a href="http://iknow.jp" target="_blank" rel="external">iKnow!</a></li>
<li><a href="https://lingvist.com/" target="_blank" rel="external">LINGVIST</a></li>
</ul>
<h2 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h2><ul>
<li><a href="https://egghead.io/lessons/react-understand-the-difference-between-the-react-router-v4-router-types" target="_blank" rel="external">Understand the Difference Between the React Router v4 Router Types</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 週記 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Elixir </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[四年多來的第一篇]]></title>
      <url>/blog/2016/05/09/new-post-after-4-years/</url>
      <content type="html"><![CDATA[<p>最近又開始想寫 blog 了，<br>上一次有這個想法是在 4 年前用 octopress 來架靜態網站，<br>不過才寫了兩篇就沒戲了<br>其中一篇還是像這篇一樣的心得文QQ</p>
<p>希望這次能持續久一點</p>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> 隨筆 </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
