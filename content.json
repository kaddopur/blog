{"meta":{"title":"蝌蚪伯的摳頂筆記","subtitle":null,"description":null,"author":"Jason C. Huang","url":"http://kaddopur.github.io/blog"},"pages":[],"posts":[{"title":"Y2017W19","slug":"Y2017W19","date":"2017-05-13T04:00:00.000Z","updated":"2017-05-14T09:38:24.000Z","comments":true,"path":"2017/05/13/Y2017W19/","link":"","permalink":"http://kaddopur.github.io/blog/2017/05/13/Y2017W19/","excerpt":"Blog posts 使用 prettier 自動調整 JavaScript 樣式 Books 图说设计模式 看懂UML类图和时序图 创建型模式 简单工厂模式( Simple Factory Pattern )","text":"Blog posts 使用 prettier 自動調整 JavaScript 樣式 Books 图说设计模式 看懂UML类图和时序图 创建型模式 简单工厂模式( Simple Factory Pattern ) Languages iKnow! LINGVIST","categories":[{"name":"週記","slug":"週記","permalink":"http://kaddopur.github.io/blog/categories/週記/"}],"tags":[]},{"title":"使用 prettier 自動調整 JavaScript 樣式","slug":"prettier","date":"2017-05-10T09:41:00.000Z","updated":"2017-05-10T10:07:42.000Z","comments":true,"path":"2017/05/10/prettier/","link":"","permalink":"http://kaddopur.github.io/blog/2017/05/10/prettier/","excerpt":"前言prettier 是一款 JavaScript 的樣式處理工具，它類似 golang 的 gofmt 可以自動排版你的程式。除了 Vanilla JS 之外，尚支援了 ES6, jsx, Flow 以及正在開發中的 TypeScript。它是由 vjeux (Christopher Chedeau) 開發，在 github 上面約有 10,000 個 stars。 prettier 從今年一月的第一個 commit 開始到現在快半年，不過到它真正引起我的興趣，是從上週 (5/3) 釋出的 v1.3.0 開始。至於這個版本有什麼特別的功能嗎？非也。主要是因為這個版本有公開它在 Facebook 內部各專案使用 prettier 的情形。","text":"前言prettier 是一款 JavaScript 的樣式處理工具，它類似 golang 的 gofmt 可以自動排版你的程式。除了 Vanilla JS 之外，尚支援了 ES6, jsx, Flow 以及正在開發中的 TypeScript。它是由 vjeux (Christopher Chedeau) 開發，在 github 上面約有 10,000 個 stars。 prettier 從今年一月的第一個 commit 開始到現在快半年，不過到它真正引起我的興趣，是從上週 (5/3) 釋出的 v1.3.0 開始。至於這個版本有什麼特別的功能嗎？非也。主要是因為這個版本有公開它在 Facebook 內部各專案使用 prettier 的情形。 The first projects to adopt prettier were Jest, React and immutable-js. Those are small codebases in the order of hundreds of files that have their own infrastructure. There are a handful of people working on them full time.Then, Oculus and Nuclide converted their codebase over. The scale is bigger with a few thousands of files and tens of full time contributors but looks pretty similar to the first projects. The conversions went in one big codemod and that’s it. 可以看到 Facebook 的專案一個接一個開始用 prettier 來規範及管理他們的 JavaScript 樣式，而 prettier 和我們平常在用的 eslint 或是其他的 lint 工具相比之下孰優孰劣呢？ 優點 一致性 Consistency同一種表達式對於不同的人可能會有不同的寫法，使用 prettier 可以輕易保持代碼中樣式的一致式，避免個人習慣樣式的不同。 可教性 Teachability經過 prettier 調整格式之後，你可以知道 JavaScript 引擎是怎麼解析你所寫的代碼，進而幫助你養成良好的撰寫習慣來避免一些語意上的錯誤。例如： 1const x = value1 &amp;&amp; value2 || value3 &amp;&amp; value4; 會幫你加上括號 1const x = (value1 &amp;&amp; value2) || (value3 &amp;&amp; value4); 自由度 Freedom只需要專心在寫代碼這件事就好了，不用刻意去手動調整樣式。在抽函數的時候也蠻有用的。 如何使用prettier 提供了 CLI 方便你轉換檔案。你也可以將 prettier 設定在專案的工作流程中，在 commit 時自動排版並簽入至你的 repo。或是你也可以將 prettier 與你最愛的編輯器綁定，讓你在存檔時可以自動排版並看到結果。以下會分別介紹。 可以局部安裝到你的專案1$ yarn add prettier --dev 或是全局安裝1$ yarn global add prettier CLI使用方式如下，可以選擇想要轉換的檔案。1$ prettier [opts] [filename ...] 實際上使用的情形可能會像這樣1$ prettier --single-quote --write &quot;&#123;app,__&#123;tests,mocks&#125;__&#125;/**/*.js&quot; 想要知道有什麼參數可以下，可以輸入123456789$ prettierUsage: prettier [opts] [filename ...]Available options: --write Edit the file in-place. (Beware!) --list-different or -l Print filenames of files that are different from Prettier formatting. --stdin Read input from stdin. --print-width &lt;int&gt; Specify the length of line th ... 會列出所有可以用的選項 Node將 husky 和 lint-staged 加到專案的 devDependencies1$ yarn add lint-staged husky --dev 在 package.json 中填加以下 config1234567891011&#123; \"scripts\": &#123; \"precommit\": \"lint-staged\" &#125;, \"lint-staged\": &#123; \"*.js\": [ \"prettier --write\", \"git add\" ] &#125;&#125; husky 會讓專案在 git commit 時執行 “precommit” 這個命令。而在 lint-staged 中，會檢查所有被 stage 的檔案，如果有符合特定檔名，就會再運行指定的命令。 在上面的例子中，我們會在 git commit 之前，對所有被 stage 的 JavaScript 檔案運行 prettier 後，再重新 stage 更新後的檔案，以確保所有進入 repo 的代碼的樣式正確。 Editorprettier 對大部分的編輯器都有對應的工具，這邊以我的編輯器 VS Code 為例。 去 MartketPlace 下載 Prettier - JavaScript formatter。安裝完成後，可以用 CMD + Shift + P 來重新排版整個檔案，或是用 CMD + Shift + P 重排所選擇的區域。 想要調整 prettier 所使用的排版選項，可以在 User Settings 來全局更改所想要的 prettier 參數，或是也可以用 Workspace Settings 來按照不同專案設定不同選項。 結論在專案中，可以無痛導入工作流程而不用特別針對樣式錯誤去手動調整是 prettier 的一大優勢，可以讓 coding style 一次到位，也沒有撰寫代碼時多餘的打字或心理成本。 對於已經導入 eslint 並有團隊自訂 rule set 的專案，prettier 雖可以用參數調整所產出的代碼，但可以調整的地方有限，所產出的代碼也不一定會完全相符於之前的 rule set，這時必定要與團隊成員有良好溝通再行導入，畢竟“團隊的樣式就是最好的樣式”。","categories":[{"name":"新知","slug":"新知","permalink":"http://kaddopur.github.io/blog/categories/新知/"}],"tags":[{"name":"prettier","slug":"prettier","permalink":"http://kaddopur.github.io/blog/tags/prettier/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://kaddopur.github.io/blog/tags/JavaScript/"},{"name":"Facebook","slug":"Facebook","permalink":"http://kaddopur.github.io/blog/tags/Facebook/"},{"name":"tool","slug":"tool","permalink":"http://kaddopur.github.io/blog/tags/tool/"}]},{"title":"Y2017W18","slug":"Y2017W18","date":"2017-05-06T04:00:00.000Z","updated":"2017-05-10T09:47:13.000Z","comments":true,"path":"2017/05/06/Y2017W18/","link":"","permalink":"http://kaddopur.github.io/blog/2017/05/06/Y2017W18/","excerpt":"Articles 開發人員的面試指南 – A developer’s guide to interviewing 面試時除了面試官問你問題，你也可以反過來詢問這間公司的工作環境、獲利手段或願景等等。文中列舉你可能會想問的問題，並依詢問對象區分為工程師、管理階層以及 CTO。很適合已有實習經驗或是想換工作的工程師閱讀。 About rel=noopener 網頁中的 &lt;a&gt; 在連至外部網站時，需要帶上 rel=&quot;noopener&quot;，以避免惡意網站利用 window.opener 來改動原始網頁。 每位認真的程式設計師都要讀的10本經典書 看過其中三本 The Pragmatic Programmer (程序員修煉之道︰從小工到專家︰評注版) The Mythical Man-month: Essays on Software Engineering 👍 (人月神話:軟體專案管理之道) Clean Code: A Handbook of Agile Software Craftsmanship (無瑕的程式碼－敏捷軟體開發技巧守則) The Clean Coder: A Code of Conduct for Professional Programmers (無瑕的程式碼番外篇－專業程式設計師的生存之道) Refactoring: Improving the Design of Existing Code (重構─改善既有程式的設計) Working Effectively with Legacy Code (修改代碼的藝術) Code Complete: A Practical Handbook of Software Construction (代碼大全 2) Head First Design Patterns 👍 (深入淺出設計模式) Peopleware: Productive Projects and Teams (Peopleware：腦力密集產業的人才管理之道) Soft Skills: The software developer’s life manual 👍(軟體技能代碼之外的生存指南)","text":"Articles 開發人員的面試指南 – A developer’s guide to interviewing 面試時除了面試官問你問題，你也可以反過來詢問這間公司的工作環境、獲利手段或願景等等。文中列舉你可能會想問的問題，並依詢問對象區分為工程師、管理階層以及 CTO。很適合已有實習經驗或是想換工作的工程師閱讀。 About rel=noopener 網頁中的 &lt;a&gt; 在連至外部網站時，需要帶上 rel=&quot;noopener&quot;，以避免惡意網站利用 window.opener 來改動原始網頁。 每位認真的程式設計師都要讀的10本經典書 看過其中三本 The Pragmatic Programmer (程序員修煉之道︰從小工到專家︰評注版) The Mythical Man-month: Essays on Software Engineering 👍 (人月神話:軟體專案管理之道) Clean Code: A Handbook of Agile Software Craftsmanship (無瑕的程式碼－敏捷軟體開發技巧守則) The Clean Coder: A Code of Conduct for Professional Programmers (無瑕的程式碼番外篇－專業程式設計師的生存之道) Refactoring: Improving the Design of Existing Code (重構─改善既有程式的設計) Working Effectively with Legacy Code (修改代碼的藝術) Code Complete: A Practical Handbook of Software Construction (代碼大全 2) Head First Design Patterns 👍 (深入淺出設計模式) Peopleware: Productive Projects and Teams (Peopleware：腦力密集產業的人才管理之道) Soft Skills: The software developer’s life manual 👍(軟體技能代碼之外的生存指南) Tools Google Lighthouse 這個 google extension 是用來檢測網頁在行動裝置上的優化程度，包含是不是 https，有沒有支援離線模式……等等。 Prettier - an opinionated JavaScript formatter. 是目前 facebook 的專案採用的 js formatter，對各種編緝器的支援也很好，還有 CLI 可以用。 Languages iKnow! LINGVIST","categories":[{"name":"週記","slug":"週記","permalink":"http://kaddopur.github.io/blog/categories/週記/"}],"tags":[{"name":"prettier","slug":"prettier","permalink":"http://kaddopur.github.io/blog/tags/prettier/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://kaddopur.github.io/blog/tags/JavaScript/"}]},{"title":"Y2017W17","slug":"Y2017W17","date":"2017-04-29T10:04:12.000Z","updated":"2017-05-05T11:00:20.000Z","comments":true,"path":"2017/04/29/Y2017W17/","link":"","permalink":"http://kaddopur.github.io/blog/2017/04/29/Y2017W17/","excerpt":"Leetcode 88. Merge Sorted Array 26. Remove Duplicates from Sorted Array 414. Third Maximum Number 448. Find All Numbers Disappeared in an Array 532. K-diff Pairs in an Array 561. Array Partition I","text":"Leetcode 88. Merge Sorted Array 26. Remove Duplicates from Sorted Array 414. Third Maximum Number 448. Find All Numbers Disappeared in an Array 532. K-diff Pairs in an Array 561. Array Partition I Books 软技能 代码之外的生存指南 - John Z. Sonmez, 王小刚 Chapter 17 ~ 71 Languages iKnow! LINGVIST","categories":[{"name":"週記","slug":"週記","permalink":"http://kaddopur.github.io/blog/categories/週記/"}],"tags":[]},{"title":"Y2017W16","slug":"Y2017W16","date":"2017-04-22T10:04:12.000Z","updated":"2017-05-05T11:00:20.000Z","comments":true,"path":"2017/04/22/Y2017W16/","link":"","permalink":"http://kaddopur.github.io/blog/2017/04/22/Y2017W16/","excerpt":"Books Programming Phoenix: Productive |&gt; Reliable |&gt; Fast - Chris McCord Chapter 4 - Ecto and Changesets Chapter 5 - Authenticating Users 软技能 代码之外的生存指南 - John Z. Sonmez, 王小刚 Chapter 1 ~ 16","text":"Books Programming Phoenix: Productive |&gt; Reliable |&gt; Fast - Chris McCord Chapter 4 - Ecto and Changesets Chapter 5 - Authenticating Users 软技能 代码之外的生存指南 - John Z. Sonmez, 王小刚 Chapter 1 ~ 16 Languages iKnow! LINGVIST Tutorials Understand the Difference Between the React Router v4 Router Types","categories":[{"name":"週記","slug":"週記","permalink":"http://kaddopur.github.io/blog/categories/週記/"}],"tags":[{"name":"Elixir","slug":"Elixir","permalink":"http://kaddopur.github.io/blog/tags/Elixir/"}]},{"title":"四年多來的第一篇","slug":"new-post-after-4-years","date":"2016-05-09T07:12:16.000Z","updated":"2017-05-05T11:27:18.000Z","comments":true,"path":"2016/05/09/new-post-after-4-years/","link":"","permalink":"http://kaddopur.github.io/blog/2016/05/09/new-post-after-4-years/","excerpt":"最近又開始想寫 blog 了，上一次有這個想法是在 4 年前用 octopress 來架靜態網站，不過才寫了兩篇就沒戲了其中一篇還是像這篇一樣的心得文QQ 希望這次能持續久一點","text":"最近又開始想寫 blog 了，上一次有這個想法是在 4 年前用 octopress 來架靜態網站，不過才寫了兩篇就沒戲了其中一篇還是像這篇一樣的心得文QQ 希望這次能持續久一點","categories":[{"name":"隨筆","slug":"隨筆","permalink":"http://kaddopur.github.io/blog/categories/隨筆/"}],"tags":[]}]}